{"version":3,"sources":["components/Node.jsx","components/Canvas.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Node","position","id","currentNode","setCurrentNode","createEdge","transform","x","y","onClick","e","stopPropagation","r","fill","stroke","strokeWidth","className","Number","dataReducer","state","event","name","nodes","value","node","edges","edge","Error","Canvas","useReducer","graphData","updateGraphData","useState","vector","setVector","numNodes","useRef","numEdges","first","second","console","log","current","u","v","w","posX","posY","nativeEvent","offsetX","offsetY","onMouseMove","style","width","height","x1","y1","x2","y2","Object","entries","map","element","idx","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79b6dc99.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Node({ position, id, currentNode, setCurrentNode, createEdge }) {\n  function handleClick(e) {\n    e.stopPropagation();\n    if (currentNode == null) setCurrentNode(id);\n    else createEdge(currentNode, id);\n  }\n  return (\n    <g transform={`translate(${position.x},${position.y})`} onClick={handleClick}>\n      <circle r=\"20\" fill={currentNode === id ? \"yellow\" : \"white\"} stroke=\"black\" strokeWidth=\"4px\"></circle>\n      <text x={-4.5 * (1 + (id >= 9))} className=\"unselectable\" y=\"5\" fill=\"black\">\n        {Number(id) + 1}\n      </text>\n    </g>\n  );\n}\n","import React, { useState, useReducer, useRef } from \"react\";\nimport Node from \"./Node\";\nimport \"./Canvas.css\";\n\nfunction dataReducer(state, event) {\n  switch (event.name) {\n    case \"nodes\":\n      return { ...state, nodes: { ...state.nodes, [event.value.id]: event.value.node } };\n    case \"edges\":\n      return { ...state, edges: { ...state.edges, [event.value.id]: event.value.edge } };\n    default:\n      throw new Error();\n  }\n}\nexport default function Canvas() {\n  const [graphData, updateGraphData] = useReducer(dataReducer, { nodes: {}, edges: {} });\n  const [currentNode, setCurrentNode] = useState(null);\n  const [vector, setVector] = useState({ x: 0, y: 0 });\n  const numNodes = useRef(0);\n  const numEdges = useRef(0);\n\n  function createNode(posX, posY) {\n    updateGraphData({\n      name: \"nodes\",\n      value: { id: numNodes.current++, node: { x: posX, y: posY } },\n    });\n  }\n  function createEdge(first, second) {\n    console.log(\"Creating...\");\n    updateGraphData({\n      name: \"edges\",\n      value: { id: numEdges.current++, edge: { u: first, v: second, w: 1 } },\n    });\n    setCurrentNode(null);\n  }\n  return (\n    <div\n      className=\"draw-graph\"\n      onClick={(event) => {\n        if (currentNode == null) createNode(event.nativeEvent.offsetX, event.nativeEvent.offsetY);\n        else setCurrentNode(null);\n      }}\n      onMouseMove={(event) => {\n        setVector({\n          x: event.nativeEvent.offsetX,\n          y: event.nativeEvent.offsetY,\n        });\n      }}\n    >\n      <svg style={{ width: \"100%\", height: \"100%\" }}>\n        {currentNode != null && (\n          <line\n            x1={graphData.nodes[currentNode].x}\n            y1={graphData.nodes[currentNode].y}\n            x2={vector.x}\n            y2={vector.y}\n            stroke=\"black\"\n            strokeWidth=\"3px\"\n          />\n        )}\n        {Object.entries(graphData.edges).map((element) => {\n          const idx = element[0];\n          const edge = element[1];\n          return (\n            <line\n              key={idx}\n              x1={graphData.nodes[edge.u].x}\n              y1={graphData.nodes[edge.u].y}\n              x2={graphData.nodes[edge.v].x}\n              y2={graphData.nodes[edge.v].y}\n              stroke=\"black\"\n              strokeWidth=\"3px\"\n            />\n          );\n        })}\n        {Object.entries(graphData.nodes).map((element) => {\n          const idx = element[0];\n          const node = element[1];\n          return (\n            <Node\n              key={idx}\n              id={idx}\n              position={node}\n              currentNode={currentNode}\n              setCurrentNode={setCurrentNode}\n              createEdge={createEdge}\n            />\n          );\n        })}\n      </svg>\n    </div>\n  );\n}\n","import \"./App.css\";\nimport Canvas from \"./components/Canvas\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Canvas />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}