{"version":3,"sources":["components/Node.jsx","components/Edge.jsx","components/EditWeight.jsx","components/Canvas.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Node","position","id","currentNode","handleClick","isDragged","transform","x","y","onMouseDown","e","stopPropagation","className","style","cursor","r","fill","stroke","strokeWidth","Number","Edge","weight","currentEdge","alfa","Math","atan2","y2","y1","x2","x1","centerX","centerY","isRight","textPosX","sin","textPosY","cos","rotateTextAngle","PI","translateTextDistance","round","log10","abs","EditWeight","setCurrentEdge","handleSubmit","newWeight","useRef","useEffect","current","focus","onSubmit","preventDefault","value","left","top","type","ref","autoFocus","fontSize","marginTop","color","dataReducer","state","event","name","nodes","topNode","node","edges","topEdge","edge","w","Error","Canvas","useReducer","graphData","updateGraphData","useState","setCurrentNode","edgeVector","setEdgeVector","isWeighted","setIsWeighted","isDirected","setIsDirected","deleteEdge","handleClickEdge","newEdgeData","dragTimeoutId","isDragging","setIsDragging","handleClickNode","clear","setTimeout","u","v","setGraph","graph","showInput","setShowInput","inputText","setInputText","copyAlertOpen","setCopyAlertOpen","posX","posY","nativeEvent","offsetX","offsetY","onMouseMove","onMouseUp","clearTimeout","onKeyDown","code","console","log","Object","entries","forEach","element","key","tabIndex","map","idx","onClick","navigator","clipboard","writeText","JSON","stringify","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","open","onClose","message","onChange","target","parse","Switch","checked","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4f294a6.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Node({ position, id, currentNode, handleClick, isDragged }) {\n  return (\n    <g\n      transform={`translate(${position.x},${position.y})`}\n      onMouseDown={(e) => {\n        e.stopPropagation();\n        handleClick(id);\n      }}\n      className='node'\n      style={{ cursor: `${isDragged ? 'move' : ''}` }}\n    >\n      <circle r='20' fill={currentNode === id ? '#C4EDDE' : 'white'} stroke='black' strokeWidth='4px'></circle>\n      <text x={-4.5 * (1 + (id >= 9))} className='unselectable' y='5' fill='black'>\n        {Number(id) + 1}\n      </text>\n    </g>\n  );\n}\n","import React from 'react';\n\nexport default function Edge({ id, position, weight, currentEdge, handleClick }) {\n  const alfa = Math.atan2(position.y2 - position.y1, position.x2 - position.x1);\n  const centerX = (position.x1 + position.x2) / 2;\n  const centerY = 5 + (position.y1 + position.y2) / 2;\n  const d = 10;\n  const isRight = position.x2 > position.x1;\n  const textPosX = centerX + (isRight ? 1 : -1) * d * Math.sin(alfa);\n  const textPosY = centerY + (!isRight ? 1 : -1) * d * Math.cos(alfa);\n  const rotateTextAngle = (alfa * 180) / Math.PI - 180 * !isRight;\n  const translateTextDistance = weight === '' ? 0 : -4.5 * Math.round(Math.log10(Math.abs(weight)) + 1);\n  return (\n    <g\n      onMouseDown={(e) => {\n        e.stopPropagation();\n        handleClick({ id, textPosX, textPosY });\n      }}\n      className='edge'\n    >\n      <line x1={position.x1} y1={position.y1} x2={position.x2} y2={position.y2} stroke='rgba(0,0,0,0)' strokeWidth='15px' />\n      <line\n        x1={position.x1}\n        y1={position.y1}\n        x2={position.x2}\n        y2={position.y2}\n        stroke={currentEdge && currentEdge.id === id ? 'blue' : 'black'}\n        strokeWidth='3px'\n      />\n      <text\n        x={textPosX}\n        y={textPosY}\n        className='unselectable'\n        fill={currentEdge && currentEdge.id === id ? 'blue' : 'black'}\n        transform={`rotate(${rotateTextAngle} ${textPosX} ${textPosY}) translate(${translateTextDistance})`}\n      >\n        {weight}\n      </text>\n    </g>\n  );\n}\n","import React, { useRef, useEffect } from 'react';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\n\nexport default function EditWeight({ currentEdge, setCurrentEdge, handleSubmit }) {\n  const newWeight = useRef();\n  useEffect(() => {\n    if (currentEdge && newWeight.current) newWeight.current.focus();\n  }, [currentEdge]);\n  return (\n    <form\n      className='edit-weight-form'\n      onSubmit={(e) => {\n        e.preventDefault();\n        if (newWeight.current.value === '') return;\n        handleSubmit(currentEdge.id, newWeight.current.value);\n        setCurrentEdge(null);\n      }}\n      style={{ left: `calc(${currentEdge.textPosX}px + (100vw - 480px) / 2)`, top: `calc(${currentEdge.textPosY}px + 63px)` }}\n    >\n      <input type='number' ref={newWeight} autoFocus />\n      <button type='submit'>\n        <ArrowForwardIcon fontSize='inherit' style={{ marginTop: '2px', color: 'white' }} />\n      </button>\n    </form>\n  );\n}\n","import React, { useState, useReducer, useRef } from 'react';\nimport Node from './Node';\nimport Edge from './Edge';\nimport EditWeight from './EditWeight';\nimport Switch from '@material-ui/core/Switch';\nimport BackspaceIcon from '@material-ui/icons/Backspace';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport './Canvas.css';\nimport './extra/Extra.css';\n\nfunction dataReducer(state, event) {\n  switch (event.name) {\n    case 'add-node':\n      return {\n        ...state,\n        nodes: { ...state.nodes, [event.value.id ?? state.topNode]: event.value.node },\n        topNode: state.topNode + (event.value.id !== null),\n      };\n    case 'add-edge':\n      return {\n        ...state,\n        edges: { ...state.edges, [event.value.id ?? state.topEdge]: event.value.edge },\n        topEdge: state.topEdge + (event.value.id !== null),\n      };\n    case 'delete-node':\n      delete state.nodes[event.value];\n      return state;\n    case 'edit-edge':\n      state.edges[event.value.id].w = event.value.weight;\n      return state;\n    case 'delete-edge':\n      delete state.edges[event.value.id];\n      return state;\n    case 'set-graph':\n      return event.value;\n    default:\n      throw new Error();\n  }\n}\nexport default function Canvas() {\n  const [graphData, updateGraphData] = useReducer(dataReducer, { topNode: 0, topEdge: 0, nodes: {}, edges: {} });\n  const [currentNode, setCurrentNode] = useState(null);\n  const [currentEdge, setCurrentEdge] = useState(null);\n  const [edgeVector, setEdgeVector] = useState({ x: 0, y: 0 });\n  const [isWeighted, setIsWeighted] = useState(false);\n  const [isDirected, setIsDirected] = useState(false);\n\n  function createNode(posX, posY) {\n    updateGraphData({\n      name: 'add-node',\n      value: { node: { x: posX, y: posY } },\n    });\n  }\n  function createEdge(first, second) {\n    updateGraphData({\n      name: 'add-edge',\n      value: { edge: { u: first, v: second, w: 1 } },\n    });\n  }\n  function deleteNode(id) {\n    Object.entries(graphData.edges).forEach((element) => {\n      const key = element[0];\n      const edge = element[1];\n      if (edge.u === id || edge.v === id) deleteEdge(key);\n    });\n    updateGraphData({\n      name: 'delete-node',\n      value: id,\n    });\n  }\n  function deleteEdge(id) {\n    updateGraphData({\n      name: 'delete-edge',\n      value: id,\n    });\n  }\n  function handleClickEdge(newEdgeData) {\n    setCurrentEdge(newEdgeData);\n    setCurrentNode(null);\n  }\n  // Drag and drop functionality\n  const dragTimeoutId = useRef('');\n  const [isDragging, setIsDragging] = useState(false);\n\n  function handleMouseUpNode() {\n    if (isDragging) {\n      DropNode();\n    } else {\n      clearTimeout(dragTimeoutId.current);\n    }\n  }\n  function handleClickNode(id) {\n    if (currentNode == null) {\n      clear();\n      setCurrentNode(id);\n      dragTimeoutId.current = setTimeout(() => {\n        setIsDragging(true);\n      }, 100);\n    } else {\n      createEdge(currentNode, id);\n      setCurrentNode(null);\n    }\n  }\n  function DragNode(posX, posY) {\n    updateGraphData({\n      name: 'add-node',\n      value: { id: currentNode, node: { x: posX, y: posY } },\n    });\n  }\n  function DropNode() {\n    setCurrentNode(null);\n    setIsDragging(false);\n  }\n  function editWeight(id, weight) {\n    updateGraphData({\n      name: 'edit-edge',\n      value: { id, weight },\n    });\n  }\n  function clear() {\n    setCurrentNode(null);\n    setCurrentEdge(null);\n  }\n  function setGraph(graph) {\n    updateGraphData({\n      name: 'set-graph',\n      value: graph,\n    });\n  }\n  //Input output\n  const [showInput, setShowInput] = useState(true);\n  //Import state\n  const [inputText, setInputText] = useState('');\n  //State for opening copy alert\n  const [copyAlertOpen, setCopyAlertOpen] = useState(false);\n  return (\n    <div className='popup-out'>\n      <div className='draw-graph-container popup-in'>\n        <ul className='instructions'>\n          <h2>Instructions</h2>\n          <li>Click in an empty space to create a node</li>\n          <li>Click a node and then click another to create an edge</li>\n          <li>Drag nodes by pressing and releasing</li>\n          <li>Use weights and directions to change your edges</li>\n        </ul>\n        <svg\n          className='draw-graph'\n          onMouseDown={(event) => {\n            if (currentNode == null && currentEdge == null) createNode(event.nativeEvent.offsetX, event.nativeEvent.offsetY);\n            else clear();\n          }}\n          onMouseMove={(event) => {\n            if (isDragging) {\n              DragNode(event.nativeEvent.offsetX, event.nativeEvent.offsetY);\n            } else {\n              setEdgeVector({\n                x: event.nativeEvent.offsetX,\n                y: event.nativeEvent.offsetY,\n              });\n            }\n          }}\n          onMouseUp={handleMouseUpNode}\n          onKeyDown={(event) => {\n            if (event.code === 'Escape') {\n              setCurrentNode(null);\n              setCurrentEdge(null);\n            }\n            if (event.code === 'Delete') {\n              if (currentEdge != null) {\n                deleteEdge(currentEdge);\n                console.log('Deleting..');\n              }\n              if (currentNode != null) deleteNode(currentNode);\n              setCurrentNode(null);\n              setCurrentEdge(null);\n            }\n          }}\n          tabIndex='0'\n        >\n          {currentNode != null && isDragging === false && (\n            <line\n              x1={graphData.nodes[currentNode].x}\n              y1={graphData.nodes[currentNode].y}\n              x2={edgeVector.x}\n              y2={edgeVector.y}\n              stroke='black'\n              strokeWidth='3px'\n            />\n          )}\n          {Object.entries(graphData.edges).map((element) => {\n            const idx = element[0];\n            const edge = element[1];\n            return (\n              <Edge\n                key={idx}\n                id={idx}\n                weight={isWeighted ? edge.w : ''}\n                position={{\n                  x1: graphData.nodes[edge.u].x,\n                  y1: graphData.nodes[edge.u].y,\n                  x2: graphData.nodes[edge.v].x,\n                  y2: graphData.nodes[edge.v].y,\n                }}\n                currentEdge={currentEdge}\n                setCurrentEdge={setCurrentEdge}\n                handleClick={handleClickEdge}\n              />\n            );\n          })}\n          {Object.entries(graphData.nodes).map((element) => {\n            const idx = element[0];\n            const node = element[1];\n            return (\n              <Node\n                key={idx}\n                id={idx}\n                position={node}\n                handleClick={handleClickNode}\n                currentNode={currentNode}\n                isDragged={isDragging && idx === currentNode}\n              />\n            );\n          })}\n        </svg>\n        {currentEdge != null && isWeighted && (\n          <EditWeight currentEdge={currentEdge} setCurrentEdge={setCurrentEdge} handleSubmit={editWeight} />\n        )}\n        <div className='input-output'>\n          <h2 className='output-name' onClick={() => setShowInput(false)}>\n            Export\n          </h2>\n          {!showInput && (\n            <div className='output-box'>\n              <FileCopyIcon\n                className='copy-icon'\n                onClick={() => {\n                  navigator.clipboard.writeText(JSON.stringify(graphData, null, '\\t'));\n                  setCopyAlertOpen(true);\n                }}\n              />\n              <textarea value={JSON.stringify(graphData, null, '\\t')} />\n              <Snackbar\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n                autoHideDuration={500}\n                open={copyAlertOpen}\n                onClose={() => setCopyAlertOpen(false)}\n                message='Copied to clipboard!'\n              />\n            </div>\n          )}\n          <h2 className='input-name' onClick={() => setShowInput(true)}>\n            Import\n          </h2>\n          {showInput && (\n            <div className='input-box'>\n              <textarea value={inputText} onChange={(e) => setInputText(e.target.value)} />\n            </div>\n          )}\n          {showInput && (\n            <div className='input-button' onClick={() => setGraph(JSON.parse(inputText))}>\n              Submit\n            </div>\n          )}\n        </div>\n        <div className='draw-graph-button'>\n          <BackspaceIcon fontSize='inherit' />\n          <h3>Back</h3>\n        </div>\n        <div className='draw-graph-checkbox grid-left'>\n          <h3>Weighted edges</h3>\n          <Switch\n            checked={isWeighted}\n            onChange={(e) => {\n              setIsWeighted(e.target.checked);\n            }}\n            color='secondary'\n          />\n        </div>\n        <div className='draw-graph-button'>\n          <h3>Finish</h3>\n        </div>\n        <div className='draw-graph-checkbox grid-right'>\n          <h3>Directed edges</h3>\n          <Switch\n            checked={isDirected}\n            onChange={(e) => {\n              setIsDirected(e.target.checked);\n            }}\n            color='secondary'\n          />\n        </div>\n        <div className='draw-graph-button' onClick={() => setGraph({ topNode: 0, topEdge: 0, nodes: {}, edges: {} })}>\n          <h3>New</h3>\n          <RestoreIcon fontSize='inherit' />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import \"./App.css\";\nimport Canvas from \"./components/Canvas\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Canvas />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}