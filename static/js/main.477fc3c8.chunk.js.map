{"version":3,"sources":["components/DrawGraph/Node.jsx","components/DrawGraph/Edge.jsx","components/DrawGraph/EditWeight.jsx","components/DrawGraph/Instructions.jsx","components/DrawGraph/ExportImport.jsx","components/DrawGraph/Buttons/BackButton.jsx","components/DrawGraph/Buttons/FinishButton.jsx","components/DrawGraph/Buttons/WeightedEdgesToggle.jsx","components/DrawGraph/Buttons/DirectedEdgesToggle.jsx","components/DrawGraph/Buttons/NewButton.jsx","components/DrawGraph/TemporalEdge.jsx","components/DrawGraph/DrawGraph.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Node","position","id","currentNode","handleClick","isDragged","transform","x","y","onMouseDown","e","stopPropagation","className","style","cursor","r","fill","stroke","strokeWidth","Number","Edge","edge","currentEdge","isWeighted","isDirected","isCurved","weight","w","alfa","Math","atan2","y2","y1","x2","x1","PI","length","sqrt","centerX","centerY","isRight","rotateTextAngle","translateTextDistance","round","log10","abs","bezierX","u","v","min","sin","bezierY","cos","textPosX","textPosY","liftDistance","t","tempX","tempY","angle","onDoubleClick","d","EditWeight","setCurrentEdge","handleSubmit","newWeight","useRef","useEffect","current","focus","onSubmit","preventDefault","value","type","ref","autoFocus","fontSize","marginTop","color","Instructions","ExportImport","graphData","setGraph","useState","copyAlertOpen","setCopyAlertOpen","useReducer","st","showImport","setShowImport","importText","setImportText","onClick","navigator","clipboard","writeText","JSON","stringify","readOnly","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","open","onClose","message","onChange","target","parse","Back","FinishButton","WeightedEdgesToggle","setIsWeighted","Switch","checked","DirectedEdgesToggle","setIsDirected","NewButton","resetGraph","TemporalEdge","Alert","props","elevation","variant","dataReducer","state","event","name","nodes","topNode","node","undefined","edges","topEdge","Error","DrawGraph","blankGraph","updateGraphData","setCurrentNode","openError","setOpenError","errorMessage","setErrorMessage","hasDoubleEdge","setHasDoubleEdge","edgeVector","setEdgeVector","Set","edgesSet","setEdgesSet","addToSet","item","prev","add","showEditWeight","setShowEditWeight","deleteEdge","has","next","delete","handleClickEdge","clicks","dragTimeoutId","isDragging","setIsDragging","handleClickNode","clear","setTimeout","first","second","createEdge","graph","Object","values","forEach","posX","posY","nativeEvent","offsetX","offsetY","onMouseMove","onMouseUp","clearTimeout","onKeyDown","code","entries","element","key","tabIndex","map","idx","evt","reason","severity","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.477fc3c8.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Node({ position, id, currentNode, handleClick, isDragged }) {\n  return (\n    <g\n      transform={`translate(${position.x},${position.y})`}\n      onMouseDown={(e) => {\n        e.stopPropagation();\n        handleClick(id);\n      }}\n      className='node'\n      style={{ cursor: `${isDragged ? 'move' : ''}` }}\n    >\n      <circle r='20' fill={currentNode === id ? '#C4EDDE' : 'white'} stroke='black' strokeWidth='4px'></circle>\n      <text x={-4.5 * (1 + (id >= 9))} className='unselectable' y='5' fill='black'>\n        {Number(id)}\n      </text>\n    </g>\n  );\n}\n","import React from 'react';\n\nexport default function Edge({ id, edge, position, currentEdge, handleClick, isWeighted, isDirected, isCurved }) {\n  const weight = edge.w;\n  const alfa = (Math.atan2(position.y2 - position.y1, position.x2 - position.x1) * 180) / Math.PI;\n  const length = Math.sqrt((position.x1 - position.x2) ** 2 + (position.y1 - position.y2) ** 2);\n  const centerX = (position.x1 + position.x2) / 2;\n  const centerY = 5 + (position.y1 + position.y2) / 2;\n  const isRight = position.x2 > position.x1;\n  const rotateTextAngle = alfa - 180 * !isRight;\n  const translateTextDistance = weight === '' ? 0 : -4.5 * Math.round(Math.log10(Math.abs(weight) + 1) + 1);\n  const bezierX =\n    centerX +\n    (isCurved ? 1 : 0) *\n      (edge.u < edge.v ? 1 : -1) *\n      ((isRight ? 1 : -1) * Math.min(length / 4, 50) * Math.sin((alfa * Math.PI) / 180));\n  const bezierY =\n    centerY +\n    (isCurved ? 1 : 0) *\n      (edge.u < edge.v ? 1 : -1) *\n      ((!isRight ? 1 : -1) * Math.min(length / 4, 50) * Math.cos((alfa * Math.PI) / 180));\n  const textPosX = isCurved ? 0.25 * position.x1 + 0.5 * bezierX + 0.25 * position.x2 : centerX;\n  const textPosY = isCurved ? 0.25 * position.y1 + 0.5 * bezierY + 0.25 * position.y2 : centerY;\n  const liftDistance = isCurved && edge.u > edge.v ? 20 : -10;\n  const t = 0.8;\n  const tempX = (1 - t) ** 2 * position.x1 + 2 * (1 - t) * t * bezierX + t ** 2 * position.x2;\n  const tempY = (1 - t) ** 2 * position.y1 + 2 * (1 - t) * t * bezierY + t ** 2 * position.y2;\n  const angle = (Math.atan2(position.y2 - tempY, position.x2 - tempX) * 180) / Math.PI;\n  return (\n    <g\n      onMouseDown={(e) => {\n        e.stopPropagation();\n        handleClick(id, 'single');\n      }}\n      onDoubleClick={(e) => {\n        e.stopPropagation();\n        handleClick(id, 'double');\n      }}\n      className='edge'\n    >\n      {!isCurved && (\n        <>\n          <line x1={position.x1} y1={position.y1} x2={position.x2} y2={position.y2} stroke='rgba(0,0,0,0)' strokeWidth='15px' />\n          <line\n            x1={position.x1}\n            y1={position.y1}\n            x2={position.x2}\n            y2={position.y2}\n            stroke={currentEdge && currentEdge === id ? 'blue' : 'black'}\n            strokeWidth='3px'\n          />\n        </>\n      )}\n      {isCurved && (\n        <>\n          <path\n            d={`M ${position.x1} ${position.y1} Q ${bezierX} ${bezierY} ${position.x2} ${position.y2}`}\n            stroke='rgba(0,0,0,0)'\n            strokeWidth='15px'\n            fill='transparent'\n          />\n          <path\n            d={`M ${position.x1} ${position.y1} Q ${bezierX} ${bezierY} ${position.x2} ${position.y2}`}\n            stroke={currentEdge && currentEdge === id ? 'blue' : 'black'}\n            strokeWidth='3px'\n            fill='transparent'\n          />\n        </>\n      )}\n      {isWeighted && (\n        <text\n          x={textPosX}\n          y={textPosY}\n          className='unselectable'\n          fill={currentEdge && currentEdge.id === id ? 'blue' : 'black'}\n          transform={`rotate(${rotateTextAngle} ${textPosX} ${textPosY}) \n          translate(${translateTextDistance} ${liftDistance})`}\n        >\n          {weight}\n        </text>\n      )}\n      {isDirected && (\n        <path\n          d={`M ${position.x2} ${position.y2} L ${position.x2 + 6} ${position.y2 + 20} \n          L ${position.x2 - 6} ${position.y2 + 20} Z`}\n          transform={`rotate(${(isCurved ? angle : alfa) + 90} ${position.x2} ${position.y2}) translate(0 18)`}\n          fill={currentEdge && currentEdge === id ? 'blue' : 'black'}\n        />\n      )}\n    </g>\n  );\n}\n","import React, { useRef, useEffect } from 'react';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\n\nexport default function EditWeight({ currentEdge, setCurrentEdge, handleSubmit }) {\n  const newWeight = useRef();\n  useEffect(() => {\n    if (currentEdge && newWeight.current) newWeight.current.focus();\n  }, [currentEdge]);\n  return (\n    <form\n      className='edit-weight-form'\n      onSubmit={(e) => {\n        e.preventDefault();\n        if (newWeight.current.value === '') return;\n        handleSubmit(currentEdge, newWeight.current.value);\n        setCurrentEdge(null);\n      }}\n    >\n      <input type='number' ref={newWeight} autoFocus />\n      <button type='submit'>\n        <ArrowForwardIcon fontSize='inherit' style={{ marginTop: '2px', color: 'white' }} />\n      </button>\n    </form>\n  );\n}\n","import React from 'react';\n\nexport default function Instructions() {\n  return (\n    <ul className='instructions'>\n      <h2>Instructions</h2>\n      <li>Click in an empty space to create a node</li>\n      <li>Click a node and then click another to create an edge</li>\n      <li>Drag nodes by pressing and releasing</li>\n      <li>Click a node or an edge and then press \"Delete\" to remove them</li>\n      <li>Double click an edge to change its weight (if weights are activated)</li>\n    </ul>\n  );\n}\n","import React, { useState, useReducer } from 'react';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nexport default function ExportImport({ graphData, setGraph }) {\n  const [copyAlertOpen, setCopyAlertOpen] = useState(false);\n  const [showImport, setShowImport] = useReducer((st) => !st, false);\n  const [importText, setImportText] = useState('');\n  return (\n    <div className='import-export'>\n      <h2 className='export-name' onClick={() => setShowImport()}>\n        Export\n      </h2>\n      {!showImport && (\n        <div className='export-box'>\n          <FileCopyIcon\n            className='copy-icon'\n            onClick={() => {\n              navigator.clipboard.writeText(JSON.stringify(graphData, null, '\\t'));\n              setCopyAlertOpen(true);\n            }}\n          />\n          <textarea value={JSON.stringify(graphData, null, '\\t')} readOnly />\n          <Snackbar\n            anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n            autoHideDuration={500}\n            open={copyAlertOpen}\n            onClose={() => setCopyAlertOpen(false)}\n            message='Copied to clipboard!'\n          />\n        </div>\n      )}\n      <h2 className='import-name' onClick={() => setShowImport()}>\n        Import\n      </h2>\n      {showImport && (\n        <div className='import-box'>\n          <textarea value={importText} onChange={(e) => setImportText(e.target.value)} />\n        </div>\n      )}\n      {showImport && (\n        <div className='import-button' onClick={() => setGraph(JSON.parse(importText))}>\n          Submit\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport BackspaceIcon from '@material-ui/icons/Backspace';\n\nexport default function Back() {\n  return (\n    <div className='draw-graph-button'>\n      <BackspaceIcon fontSize='inherit' />\n      <h3>Back</h3>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function FinishButton() {\n  return (\n    <div className='draw-graph-button'>\n      <h3>Finish</h3>\n    </div>\n  );\n}\n","import React from 'react';\nimport Switch from '@material-ui/core/Switch';\n\nexport default function WeightedEdgesToggle({ isWeighted, setIsWeighted }) {\n  return (\n    <div className='draw-graph-checkbox grid-left'>\n      <h3>Weighted edges</h3>\n      <Switch\n        checked={isWeighted}\n        onChange={(e) => {\n          setIsWeighted(e.target.checked);\n        }}\n        color='secondary'\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport Switch from '@material-ui/core/Switch';\n\nexport default function DirectedEdgesToggle({ isDirected, setIsDirected }) {\n  return (\n    <div className='draw-graph-checkbox grid-right'>\n      <h3>Directed edges</h3>\n      <Switch\n        checked={isDirected}\n        onChange={(e) => {\n          setIsDirected(e.target.checked);\n        }}\n        color='secondary'\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport RestoreIcon from '@material-ui/icons/Restore';\n\nexport default function NewButton({ resetGraph }) {\n  return (\n    <div className='draw-graph-button' onClick={resetGraph}>\n      <h3>New</h3>\n      <RestoreIcon fontSize='inherit' />\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function TemporalEdge({ x1, y1, x2, y2 }) {\n  const alfa = (Math.atan2(y2 - y1, x2 - x1) * 180) / Math.PI;\n  return (\n    <g>\n      <line x1={x1} y1={y1} x2={x2} y2={y2} stroke='black' strokeWidth='3px' />\n      <path\n        d={`M ${x2} ${y2} L ${x2 + 6} ${y2 + 20} \n          L ${x2 - 6} ${y2 + 20} Z`}\n        transform={`rotate(${alfa + 90} ${x2} ${y2})`}\n      />\n    </g>\n  );\n}\n","import React, { useState, useReducer, useRef, useEffect } from 'react';\nimport Node from './Node';\nimport Edge from './Edge';\nimport EditWeight from './EditWeight';\nimport Instructions from './Instructions';\nimport ExportImport from './ExportImport';\nimport BackButton from './Buttons/BackButton';\nimport FinishButton from './Buttons/FinishButton';\nimport WeightedEdgesToggle from './Buttons/WeightedEdgesToggle';\nimport DirectedEdgesToggle from './Buttons/DirectedEdgesToggle';\nimport NewButton from './Buttons/NewButton';\nimport TemporalEdge from './TemporalEdge';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport './DrawGraph.css';\nimport '../extra/Extra.css';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant='filled' {...props} />;\n}\n\nfunction dataReducer(state, event) {\n  switch (event.name) {\n    case 'add-node':\n      return {\n        ...state,\n        nodes: { ...state.nodes, [event.value.id ?? state.topNode]: event.value.node },\n        topNode: state.topNode + (event.value.id === undefined ? 1 : 0),\n      };\n    case 'add-edge':\n      return {\n        ...state,\n        edges: { ...state.edges, [event.value.id ?? state.topEdge]: event.value.edge },\n        topEdge: state.topEdge + (event.value.id === undefined ? 1 : 0),\n      };\n    case 'delete-node':\n      delete state.nodes[event.value];\n      return state;\n    case 'edit-edge':\n      state.edges[event.value.id].w = event.value.weight;\n      return state;\n    case 'delete-edge':\n      delete state.edges[event.value];\n      return state;\n    case 'set-graph':\n      return event.value;\n    case 'set-isWeighted':\n      return { ...state, isWeighted: event.value };\n    case 'set-isDirected':\n      return { ...state, isDirected: event.value };\n    default:\n      throw new Error();\n  }\n}\nexport default function DrawGraph() {\n  const blankGraph = { topNode: 0, topEdge: 0, isWeighted: false, isDirected: false, nodes: {}, edges: {} };\n  const [graphData, updateGraphData] = useReducer(dataReducer, blankGraph);\n  const [currentNode, setCurrentNode] = useState(null);\n  const [currentEdge, setCurrentEdge] = useState(null);\n\n  //Error states\n  const [openError, setOpenError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [hasDoubleEdge, setHasDoubleEdge] = useState(false);\n  //Vector to draw temporary line\n  const [edgeVector, setEdgeVector] = useState({ x: 0, y: 0 });\n  //Set to check if an edge between u,v exists\n  const [edgesSet, setEdgesSet] = useState(() => new Set());\n  function addToSet(item) {\n    setEdgesSet((prev) => new Set(prev).add(item));\n  }\n  function removeFromSet(item) {\n    setEdgesSet((prev) => {\n      const next = new Set(prev);\n      next.delete(item);\n      return next;\n    });\n  }\n  //State to open and close editWeight\n  const [showEditWeight, setShowEditWeight] = useState(false);\n  useEffect(() => {\n    if (currentEdge === null) setShowEditWeight(false);\n  }, [currentEdge]);\n\n  function createNode(posX, posY) {\n    updateGraphData({\n      name: 'add-node',\n      value: { node: { x: posX, y: posY } },\n    });\n  }\n  function createEdge(first, second) {\n    if (first === second) return;\n    //If user tries to add edge to u->v and it already exists\n    if (edgesSet.has(JSON.stringify([first, second]))) {\n      setErrorMessage('Edge already exists!');\n      setOpenError(true);\n      return;\n    }\n    //If user tries to add edge u->v but v->u already exists and is not directed\n    if (!graphData.isDirected && edgesSet.has(JSON.stringify([second, first]))) {\n      setErrorMessage('Graph needs to be directed to add double edges!');\n      setOpenError(true);\n      return;\n    }\n    //If there exists and edge u->v and another v->u then make hasDoubleEdge true\n    if (edgesSet.has(JSON.stringify([second, first]))) {\n      setHasDoubleEdge(true);\n    }\n    //If there is no errors insert into set and update graph data\n    addToSet(JSON.stringify([first, second]));\n    updateGraphData({\n      name: 'add-edge',\n      value: { edge: { u: first, v: second, w: 1 } },\n    });\n  }\n  function deleteNode(id) {\n    Object.entries(graphData.edges).forEach((element) => {\n      const key = element[0];\n      const edge = element[1];\n      if (edge.u === id || edge.v === id) deleteEdge(key);\n    });\n    updateGraphData({\n      name: 'delete-node',\n      value: id,\n    });\n  }\n  function deleteEdge(id) {\n    //If the user deletes u->v and v->u exists then hasDoubleEdge becomes false\n    if (edgesSet.has(JSON.stringify([graphData.edges[id].v, graphData.edges[id].u]))) {\n      setHasDoubleEdge(false);\n    }\n    removeFromSet(JSON.stringify([graphData.edges[id].u, graphData.edges[id].v]));\n    updateGraphData({\n      name: 'delete-edge',\n      value: id,\n    });\n  }\n  function handleClickEdge(id, clicks) {\n    setCurrentEdge(id);\n    setCurrentNode(null);\n    if (clicks === 'double') {\n      setShowEditWeight(true);\n    }\n  }\n  // Drag and drop functionality\n  const dragTimeoutId = useRef('');\n  const [isDragging, setIsDragging] = useState(false);\n\n  function handleMouseUpNode() {\n    if (isDragging) {\n      DropNode();\n    } else {\n      clearTimeout(dragTimeoutId.current);\n    }\n  }\n  function handleClickNode(id) {\n    if (currentNode == null) {\n      clear();\n      setCurrentNode(id);\n      dragTimeoutId.current = setTimeout(() => {\n        setIsDragging(true);\n      }, 100);\n    } else {\n      createEdge(currentNode, id);\n      setCurrentNode(null);\n    }\n  }\n  function DragNode(posX, posY) {\n    updateGraphData({\n      name: 'add-node',\n      value: { id: currentNode, node: { x: posX, y: posY } },\n    });\n  }\n  function DropNode() {\n    setCurrentNode(null);\n    setIsDragging(false);\n  }\n  function editWeight(id, weight) {\n    updateGraphData({\n      name: 'edit-edge',\n      value: { id, weight },\n    });\n  }\n  function clear() {\n    setCurrentNode(null);\n    setCurrentEdge(null);\n  }\n  function setGraph(graph) {\n    updateGraphData({\n      name: 'set-graph',\n      value: graph,\n    });\n    edgesSet.clear();\n    Object.values(graph.edges).forEach((edge) => {\n      addToSet(JSON.stringify([edge.u, edge.v]));\n    });\n  }\n  return (\n    <div className='popup-out'>\n      <div className='draw-graph-container popup-in'>\n        <Instructions />\n        <svg\n          className='draw-graph'\n          onMouseDown={(event) => {\n            if (currentNode == null && currentEdge == null) createNode(event.nativeEvent.offsetX, event.nativeEvent.offsetY);\n            else clear();\n          }}\n          onMouseMove={(event) => {\n            if (isDragging) {\n              DragNode(event.nativeEvent.offsetX, event.nativeEvent.offsetY);\n            } else {\n              setEdgeVector({\n                x: event.nativeEvent.offsetX,\n                y: event.nativeEvent.offsetY,\n              });\n            }\n          }}\n          onMouseUp={handleMouseUpNode}\n          onKeyDown={(event) => {\n            if (event.code === 'Escape') {\n              setCurrentNode(null);\n              setCurrentEdge(null);\n            }\n            if (event.code === 'Delete') {\n              if (currentEdge != null) {\n                deleteEdge(currentEdge);\n              }\n              if (currentNode != null) deleteNode(currentNode);\n              setCurrentNode(null);\n              setCurrentEdge(null);\n            }\n          }}\n          tabIndex='0'\n        >\n          {currentNode != null && isDragging === false && (\n            <TemporalEdge\n              x1={graphData.nodes[currentNode].x}\n              y1={graphData.nodes[currentNode].y}\n              x2={edgeVector.x}\n              y2={edgeVector.y}\n            />\n          )}\n          {Object.entries(graphData.edges).map((element) => {\n            const idx = element[0];\n            const edge = element[1];\n            return (\n              <Edge\n                key={idx}\n                id={idx}\n                edge={edge}\n                currentEdge={currentEdge}\n                position={{\n                  x1: graphData.nodes[edge.u].x,\n                  y1: graphData.nodes[edge.u].y,\n                  x2: graphData.nodes[edge.v].x,\n                  y2: graphData.nodes[edge.v].y,\n                }}\n                setCurrentEdge={setCurrentEdge}\n                handleClick={handleClickEdge}\n                isWeighted={graphData.isWeighted}\n                isDirected={graphData.isDirected}\n                isCurved={edgesSet.has(JSON.stringify([edge.v, edge.u]))}\n              />\n            );\n          })}\n          {Object.entries(graphData.nodes).map((element) => {\n            const idx = element[0];\n            const node = element[1];\n            return (\n              <Node\n                key={idx}\n                id={idx}\n                position={node}\n                handleClick={handleClickNode}\n                currentNode={currentNode}\n                isDragged={isDragging && idx === currentNode}\n              />\n            );\n          })}\n        </svg>\n        <Snackbar\n          open={openError}\n          autoHideDuration={2500}\n          onClose={(evt, reason) => {\n            if (reason === 'clickaway') return;\n            setOpenError(false);\n          }}\n        >\n          <Alert\n            onClose={(evt, reason) => {\n              if (reason === 'clickaway') return;\n              setOpenError(false);\n            }}\n            severity='error'\n          >\n            {errorMessage}\n          </Alert>\n        </Snackbar>\n        {showEditWeight && graphData.isWeighted && (\n          <EditWeight currentEdge={currentEdge} setCurrentEdge={setCurrentEdge} handleSubmit={editWeight} />\n        )}\n        <ExportImport graphData={graphData} setGraph={setGraph} />\n        <BackButton />\n        <WeightedEdgesToggle\n          isWeighted={graphData.isWeighted}\n          setIsWeighted={(checked) => updateGraphData({ name: 'set-isWeighted', value: checked })}\n        />\n        <FinishButton />\n        <DirectedEdgesToggle\n          isDirected={graphData.isDirected}\n          setIsDirected={(checked) => {\n            //If it has double edge throw error when trying to change to undirected\n            if (hasDoubleEdge && checked === false) {\n              setErrorMessage(\"There is a double edge, graph can't be undirected until one of the edges is removed\");\n              setOpenError(true);\n              return;\n            }\n            updateGraphData({ name: 'set-isDirected', value: checked });\n          }}\n        />\n        <NewButton resetGraph={() => setGraph(blankGraph)} />\n      </div>\n    </div>\n  );\n}\n","import './App.css';\nimport DrawGraph from './components/DrawGraph/DrawGraph';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <DrawGraph />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}