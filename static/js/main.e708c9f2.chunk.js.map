{"version":3,"sources":["components/Node.jsx","components/Edge.jsx","components/EditWeight.jsx","components/Canvas.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Node","position","id","currentNode","handleClick","isDragged","transform","x","y","onMouseDown","e","stopPropagation","className","style","cursor","r","fill","stroke","strokeWidth","Number","Edge","weight","currentEdge","alfa","Math","atan2","y2","y1","x2","x1","centerX","centerY","isRight","textPosX","sin","textPosY","cos","rotateTextAngle","PI","translateTextDistance","round","log10","abs","EditWeight","setCurrentEdge","handleSubmit","newWeight","useRef","useEffect","current","focus","onSubmit","preventDefault","value","left","top","type","ref","autoFocus","fontSize","marginTop","color","dataReducer","state","event","name","nodes","node","edges","edge","w","Error","Canvas","useReducer","graphData","updateGraphData","useState","setCurrentNode","edgeVector","setEdgeVector","isWeighted","numNodes","numEdges","deleteEdge","handleClickEdge","newEdgeData","dragTimeoutId","isDragging","setIsDragging","handleClickNode","first","second","clear","setTimeout","u","v","posX","posY","nativeEvent","offsetX","offsetY","onMouseMove","onMouseUp","clearTimeout","onKeyDown","code","Object","entries","forEach","element","key","tabIndex","map","idx","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e708c9f2.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Node({ position, id, currentNode, handleClick, isDragged }) {\n  return (\n    <g\n      transform={`translate(${position.x},${position.y})`}\n      onMouseDown={(e) => {\n        e.stopPropagation();\n        handleClick(id);\n      }}\n      className='node'\n      style={{ cursor: `${isDragged ? 'move' : ''}` }}\n    >\n      <circle r='20' fill={currentNode === id ? '#C4EDDE' : 'white'} stroke='black' strokeWidth='4px'></circle>\n      <text x={-4.5 * (1 + (id >= 9))} className='unselectable' y='5' fill='black'>\n        {Number(id) + 1}\n      </text>\n    </g>\n  );\n}\n","import React from 'react';\n\nexport default function Edge({ id, position, weight, currentEdge, handleClick }) {\n  const alfa = Math.atan2(position.y2 - position.y1, position.x2 - position.x1);\n  const centerX = (position.x1 + position.x2) / 2;\n  const centerY = 5 + (position.y1 + position.y2) / 2;\n  const d = 10;\n  const isRight = position.x2 > position.x1;\n  const textPosX = centerX + (isRight ? 1 : -1) * d * Math.sin(alfa);\n  const textPosY = centerY + (!isRight ? 1 : -1) * d * Math.cos(alfa);\n  const rotateTextAngle = (alfa * 180) / Math.PI - 180 * !isRight;\n  const translateTextDistance = -4.5 * Math.round(Math.log10(Math.abs(weight)) + 1);\n  return (\n    <g\n      onMouseDown={(e) => {\n        e.stopPropagation();\n        handleClick({ id, textPosX, textPosY });\n      }}\n      className='edge'\n    >\n      <line x1={position.x1} y1={position.y1} x2={position.x2} y2={position.y2} stroke='rgba(0,0,0,0)' strokeWidth='15px' />\n      <line\n        x1={position.x1}\n        y1={position.y1}\n        x2={position.x2}\n        y2={position.y2}\n        stroke={currentEdge && currentEdge.id === id ? 'blue' : 'black'}\n        strokeWidth='3px'\n      />\n      <text\n        x={textPosX}\n        y={textPosY}\n        className='unselectable'\n        fill={currentEdge && currentEdge.id === id ? 'blue' : 'black'}\n        transform={`rotate(${rotateTextAngle} ${textPosX} ${textPosY}) translate(${translateTextDistance})`}\n      >\n        {weight}\n      </text>\n    </g>\n  );\n}\n","import React, { useRef, useEffect } from 'react';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\n\nexport default function EditWeight({ currentEdge, setCurrentEdge, handleSubmit }) {\n  const newWeight = useRef();\n  useEffect(() => {\n    if (currentEdge && newWeight.current) newWeight.current.focus();\n  }, [currentEdge]);\n  return (\n    <form\n      className='edit-weight-form'\n      onSubmit={(e) => {\n        e.preventDefault();\n        if (newWeight.current.value === '') return;\n        handleSubmit(currentEdge.id, newWeight.current.value);\n        setCurrentEdge(null);\n      }}\n      style={{ left: `calc(${currentEdge.textPosX}px + (100vw - 480px) / 2)`, top: `calc(${currentEdge.textPosY}px + 63px)` }}\n    >\n      <input type='number' ref={newWeight} autoFocus />\n      <button type='submit'>\n        <ArrowForwardIcon fontSize='inherit' style={{ marginTop: '2px', color: 'white' }} />\n      </button>\n    </form>\n  );\n}\n","import React, { useState, useReducer, useRef } from 'react';\nimport Node from './Node';\nimport Edge from './Edge';\nimport EditWeight from './EditWeight';\nimport './Canvas.css';\nimport './extra/Extra.css';\n\nfunction dataReducer(state, event) {\n  switch (event.name) {\n    case 'add-node':\n      return { ...state, nodes: { ...state.nodes, [event.value.id]: event.value.node } };\n    case 'add-edge':\n      return { ...state, edges: { ...state.edges, [event.value.id]: event.value.edge } };\n    case 'delete-node':\n      delete state.nodes[event.value];\n      return state;\n    case 'edit-edge':\n      state.edges[event.value.id].w = event.value.weight;\n      return state;\n    case 'delete-edge':\n      delete state.edges[event.value];\n      return state;\n    default:\n      throw new Error();\n  }\n}\nexport default function Canvas() {\n  const [graphData, updateGraphData] = useReducer(dataReducer, { nodes: {}, edges: {} });\n  const [currentNode, setCurrentNode] = useState(null);\n  const [currentEdge, setCurrentEdge] = useState(null);\n  const [edgeVector, setEdgeVector] = useState({ x: 0, y: 0 });\n  const [isWeighted, setIsWeighted] = useState(true);\n  const numNodes = useRef(0);\n  const numEdges = useRef(0);\n\n  function createNode(posX, posY) {\n    updateGraphData({\n      name: 'add-node',\n      value: { id: numNodes.current++, node: { x: posX, y: posY } },\n    });\n  }\n  function createEdge(first, second) {\n    updateGraphData({\n      name: 'add-edge',\n      value: { id: numEdges.current++, edge: { u: first, v: second, w: 1 } },\n    });\n  }\n  function deleteNode(id) {\n    Object.entries(graphData.edges).forEach((element) => {\n      const key = element[0];\n      const edge = element[1];\n      if (edge.u === id || edge.v === id) deleteEdge(key);\n    });\n    updateGraphData({\n      name: 'delete-node',\n      value: id,\n    });\n  }\n  function deleteEdge(id) {\n    updateGraphData({\n      name: 'delete-edge',\n      value: id,\n    });\n  }\n  function handleClickEdge(newEdgeData) {\n    setCurrentEdge(newEdgeData);\n    setCurrentNode(null);\n  }\n  // Drag and drop functionality\n  const dragTimeoutId = useRef('');\n  const [isDragging, setIsDragging] = useState(false);\n\n  function handleMouseUpNode() {\n    if (isDragging) {\n      DropNode();\n    } else {\n      clearTimeout(dragTimeoutId.current);\n    }\n  }\n  function handleClickNode(id) {\n    if (currentNode == null) {\n      clear();\n      setCurrentNode(id);\n      dragTimeoutId.current = setTimeout(() => {\n        setIsDragging(true);\n      }, 100);\n    } else {\n      createEdge(currentNode, id);\n      setCurrentNode(null);\n    }\n  }\n  function DragNode(posX, posY) {\n    updateGraphData({\n      name: 'add-node',\n      value: { id: currentNode, node: { x: posX, y: posY } },\n    });\n  }\n  function DropNode() {\n    setCurrentNode(null);\n    setIsDragging(false);\n  }\n  function editWeight(id, weight) {\n    updateGraphData({\n      name: 'edit-edge',\n      value: { id, weight },\n    });\n  }\n  function clear() {\n    setCurrentNode(null);\n    setCurrentEdge(null);\n  }\n  return (\n    <div className='popup-out'>\n      <div className='draw-graph-container popup-in'>\n        <ul className='instructions'>\n          <h2>Instructions</h2>\n          <li>Click in an empty space to create a node</li>\n          <li>Click a node and then click another to create an edge</li>\n          <li>Drag nodes by pressing and releasing</li>\n          <li>Use weights and directions to change your edges</li>\n        </ul>\n        <svg\n          className='draw-graph'\n          onMouseDown={(event) => {\n            if (currentNode == null && currentEdge == null) createNode(event.nativeEvent.offsetX, event.nativeEvent.offsetY);\n            else clear();\n          }}\n          onMouseMove={(event) => {\n            if (isDragging) {\n              DragNode(event.nativeEvent.offsetX, event.nativeEvent.offsetY);\n            } else {\n              setEdgeVector({\n                x: event.nativeEvent.offsetX,\n                y: event.nativeEvent.offsetY,\n              });\n            }\n          }}\n          onMouseUp={handleMouseUpNode}\n          onKeyDown={(event) => {\n            if (event.code === 'Escape') {\n              setCurrentNode(null);\n              setCurrentEdge(null);\n            }\n            if (event.code === 'Delete') {\n              if (currentEdge != null) deleteEdge(currentEdge);\n              if (currentNode != null) deleteNode(currentNode);\n              setCurrentNode(null);\n              setCurrentEdge(null);\n            }\n          }}\n          tabIndex='0'\n        >\n          {currentNode != null && isDragging === false && (\n            <line\n              x1={graphData.nodes[currentNode].x}\n              y1={graphData.nodes[currentNode].y}\n              x2={edgeVector.x}\n              y2={edgeVector.y}\n              stroke='black'\n              strokeWidth='3px'\n            />\n          )}\n          {Object.entries(graphData.edges).map((element) => {\n            const idx = element[0];\n            const edge = element[1];\n            return (\n              <Edge\n                key={idx}\n                id={idx}\n                weight={isWeighted ? edge.w : ''}\n                position={{\n                  x1: graphData.nodes[edge.u].x,\n                  y1: graphData.nodes[edge.u].y,\n                  x2: graphData.nodes[edge.v].x,\n                  y2: graphData.nodes[edge.v].y,\n                }}\n                currentEdge={currentEdge}\n                setCurrentEdge={setCurrentEdge}\n                handleClick={handleClickEdge}\n              />\n            );\n          })}\n          {Object.entries(graphData.nodes).map((element) => {\n            const idx = element[0];\n            const node = element[1];\n            return (\n              <Node\n                key={idx}\n                id={idx}\n                position={node}\n                handleClick={handleClickNode}\n                currentNode={currentNode}\n                isDragged={isDragging && idx === currentNode}\n              />\n            );\n          })}\n        </svg>\n        {currentEdge != null && (\n          <EditWeight currentEdge={currentEdge} setCurrentEdge={setCurrentEdge} handleSubmit={editWeight} />\n        )}\n        <div>Input/Output </div>\n        <div>Use Weights</div>\n        <div>Use Directed edges</div>\n        <div>Finish</div>\n        <div>New</div>\n      </div>\n    </div>\n  );\n}\n","import \"./App.css\";\nimport Canvas from \"./components/Canvas\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Canvas />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}